#compdef icarus
# vim: ft=sh

#   __|    \    _ \  |      _ \   __| __ __| __ __|
#  (      _ \     /  |     (   | (_ |    |      |
# \___| _/  _\ _|_\ ____| \___/ \___|   _|     _|

# zsh completion for icarus

# 1) Check for terminal options and prevent further completions
if [[ " ${words[*]} " == *" -h "* || " ${words[*]} " == *" --help "* || " ${words[*]} " == *" --version "* ]]; then
    return 0
fi

# 2) Filter out global options -v / --verbose
local -a filtered_words
filtered_words=("${(@)words:#(-v|--verbose)}")

# 3) Reassign $words/$CURRENT so that subcommand logic ignores -v/--verbose
words=("${filtered_words[@]}")
CURRENT=$#words

# 4) Use a stateful _arguments approach
_arguments -C \
  '1:subcommand:->subcmd' \
  '2:action:->action' \
  '*::options:->options'

case $state in
  #################################################################
  # Step 1: Complete the subcommand (amazon, builder, macos, unison)
  #################################################################
  subcmd)
    _values 'subcommand' \
      "amazon[utilities for Amazon environment]" \
      "builder[utilities for software development]" \
      "macos[utilities for macOS]" \
      "unison[utilities to manage Unison daemon]"
    ;;

  #################################################################
  # Step 2: Once subcommand is chosen, complete the sub-subcommand
  #   (like `auth-init`, `auth-init-exp`, etc.)
  #################################################################
  action)
    case $words[2] in
      amazon)
        _values 'amazon subcommand' \
          "auth-init[run midway authentication on localhost/remote]" \
          "auth-init-exp[run midway auth express]" \
          "midway-cookie[check cookies validity]" \
          "devdsk-formation[run DevDsk Formation]" \
          "update-hosts[update /etc/hosts]" \
          "update-hosts-d[daemon to update hosts file hourly]" \
          "brazil-setup[create case-sensitive volumes]" \
          "spurdog-ro[check Spurdog Program membership]"
        ;;
      builder)
        _values 'builder subcommand' \
          "python-pkg-init[init a new Python package]" \
          "dotfiles-update[update dotfiles]"
        ;;
      macos)
        _values 'macos subcommand' \
          "find-unencrypted-volumes[find unencrypted volumes]" \
          "make-encrypted-volume[make an APFS encrypted volume]" \
          "encrypt-volume[encrypt an existing APFS volume]" \
          "mount-volume[mount a volume]" \
          "mount-at-startup[install a LaunchDaemon to mount at startup]"
        ;;
      unison)
        _values 'unison subcommand' \
          "status[check running status]" \
          "restart[restart Unison profile sync]" \
          "stop[stop Unison profile sync]" \
          "clear-locks[clear Unison locks]" \
          "start-at-startup[daemon to start Unison at startup]" \
          "run-profiles[[DO NOT USE] internal]"
        ;;
    esac
    ;;

  #################################################################
  # Step 3: Complete any options/flags for the chosen sub-subcommand
  #################################################################
  options)
    case $words[2] in
      amazon)
        case $words[3] in
          auth-init)
            _arguments \
              '-h[show help message and exit]' \
              '*-i[OPTIONAL multiple DevDsk IDs i.e. -i 1 2 3]' \
              '--mw-args[OPTIONAL specify one arg to pass to mwinit]'
            ;;
          auth-init-exp)
            _arguments \
              '-h[show help message and exit]' \
              '*-i[OPTIONAL multiple DevDsk IDs i.e. -i 1 2 3]' \
              '--mw-args[OPTIONAL specify one arg to pass to mwinit]'
            ;;
          midway-cookie)
            _arguments \
              '-h[show help message and exit]' \
              '--filepath[optional cookie file path, defaults to ~/.midway/cookie]'
            ;;
          devdsk-formation)
            _arguments \
              '-h[show help message and exit]' \
              '-i[REQUIRED DevDsk ID]'
            ;;
          update-hosts|brazil-setup)
            _arguments '-h[show help message and exit]'
            ;;
          spurdog-ro)
            _arguments \
              '-h[show help message and exit]' \
              '-u[REQUIRED Amazon user alias]' \
              '--auth[OPTIONAL run mwinit before querying]'
            ;;
        esac
        ;;
      builder)
        case $words[3] in
          python-pkg-init)
            _arguments \
              '-h[show help message and exit]' \
              '-n[REQUIRED package name in PascalCase]'
            ;;
          dotfiles-update)
            _arguments '-h[show help message and exit]'
            ;;
        esac
        ;;
      macos)
        case $words[3] in
          find-unencrypted-volumes)
            _arguments '-h[show help message and exit]'
            ;;
          make-encrypted-volume)
            _arguments \
              '-h[show help message and exit]' \
              '-n[REQUIRED name of the volume]' \
              '-q[OPTIONAL size in Gb i.e. -q 50g]'
            ;;
          encrypt-volume)
            _arguments \
              '-h[show help message and exit]' \
              '-n[REQUIRED name of the volume to encrypt]'
            ;;
          mount-volume|mount-at-startup)
            _arguments \
              '-h[show help message and exit]' \
              '-n[REQUIRED name of the volume to mount]' \
              '-p[REQUIRED mount point]'
            ;;
        esac
        ;;
      unison)
        case $words[3] in
          status|restart|stop|start-at-startup|run-profiles)
            _arguments '-h[show help message and exit]'
            ;;
          clear-locks)
            _arguments \
              '-h[show help message and exit]' \
              '-i[OPTIONAL DevDsk ID]'
            ;;
        esac
        ;;
    esac
    ;;
esac

return 0
