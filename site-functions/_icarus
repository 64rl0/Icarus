# zsh completion for icarus cli
# vim: ft=sh

# Enable autoloading
#compdef icarus

_icarus() {
  local -a commands
  local -a amazon_args builder_args macos_args unison_args

  commands=(
    '--amazon:Utilities for Amazon environment'
    '--builder:Utilities for software development'
    '--macos:Utilities for macOS'
    '--unison:Utilities to manage Unison daemon'
    '--help:Show help'
    '-h:Show help'
  )

  amazon_args=(
    '--auth-init:Run midway authentication on localhost and optional remote DevDsk(s)'
    '-a:Run midway authentication on localhost and optional remote DevDsk(s)'

    '--midway-cookie:Check the cookies validity'
    '-c:Check the cookies validity'

    '--devdsk-formation:Run DevDsk Formation on a remote DevDsk'
    '-d:Run DevDsk Formation on a remote DevDsk'

    '--update-hosts:Update /etc/hosts file'
    '-s:Update /etc/hosts file'

    '--update-hosts-d:Install a LaunchDaemon to update the hosts file every hour'
    '-u:Install a LaunchDaemon to update the hosts file every hour'

    '--brazil-setup:Creating case-sensitive volumes ('workplace' and 'brazil-pkg-cache')'
    '-b:Creating case-sensitive volumes ('workplace' and 'brazil-pkg-cache')'

    '--spurdog-ro:Check membership for Spurdog Program'
    '-r:Check membership for Spurdog Program'
  )

  builder_args=(
    '--python-package-init:Initiate a new Python package in the current folder'
    '-p:Initiate a new Python package in the current folder'

    '--dotfiles-update:Update dotfiles from their specified repository'
    '-d:Update dotfiles from their specified repository'
  )

  macos_args=(
    '--find-unencrypted-volumes:Find unencrypted volumes'
    '-f:Find unencrypted volumes'

    '--make-encrypted-volume:Make an encrypted APFS volume'
    '-c:Make an encrypted APFS volume'

    '--encrypt-volume:Encrypt an existing APFS volume'
    '-e:Encrypt an existing APFS volume'

    '--mount-volume:Mount the specified volume at the specified mount point'
    '-m:Mount the specified volume at the specified mount point'

    '--mount-at-startup:Install a LaunchDaemon to mount the volume at System Startup'
    '-l:Install a LaunchDaemon to mount the volume at System Startup'
  )

  unison_args=(
    '--status:Check the running status of each Unison profile'
    '-i:Check the running status of each Unison profile'

    '--start:Start Unison profile(s) sync'
    '-s:Start Unison profile(s) sync'

    '--stop:Stop Unison profile(s) sync'
    '-k:Stop Unison profile(s) sync'

    '--clear-locks:Clear Unison locks on localhost and a optional remote DevDsk'
    '-c:Clear Unison locks on localhost and a optional remote DevDsk'

    '--start-at-startup:Install a LaunchDaemon to start Unison at System Startup'
    '-l:Install a LaunchDaemon to start Unison at System Startup'
  )

  case "$words[2]" in
    --amazon)
      case "$words[3]" in
        -a|--auth-init)
          _arguments '-i[[[DEVDSK_ID]:DevDsk ID, takes multiple ids i.e. -i 1 2 3]'
          ;;
        -d|--devdsk-formation)
          _arguments '-i[DEVDSK_ID]:DevDsk ID'
          ;;
        -r|--spurdog-ro)
          _arguments '-u[AMZ_ALIAS]:Amazon user alias'
          ;;
        *)
          _describe 'args' amazon_args
          ;;
      esac
      ;;
    --builder)
      case "$words[3]" in
        -p|--python-package-init)
          _arguments '-n[PACKAGE_NAME]:Package name in PascalCase'
          ;;
        *)
          _describe 'args' builder_args
          ;;
      esac
      ;;
    --macos)
      case "$words[3]" in
        -c|--make-encrypted-volume)
          _arguments '-n[REQUIRED Name of the volume to create]:REQUIRED Name of the volume to create:()'
            case "$words[4]" in
            -n)
              _arguments '-q[OPTIONAL Quota in Gb i.e. -q 50g]::()'
              ;;
            *)
              :
              ;;
            esac
          ;;
        -m|--mount-volume)
          _arguments '-n[REQUIRED Name of the volume to mount]' '-p[REQUIRED Mount point]'
          ;;
        -l|--mount-at-startup)
          _arguments '-n[REQUIRED Name of the volume to mount]' '-p[REQUIRED Mount point]'
          ;;
        *)
          _describe 'args' macos_args
          ;;
      esac
      ;;
    --unison)
      case "$words[3]" in
        -c|--clear-locks)
          _arguments '-i[DEVDSK_ID]:DevDsk ID'
          ;;
        *)
          _describe 'args' unison_args
          ;;
      esac
      ;;
    *)
      _describe 'commands' commands
      ;;
  esac
}

# Register the completion function
compdef _icarus icarus
