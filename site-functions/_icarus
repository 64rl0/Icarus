#compdef icarus

# Optional debug logger: writes debug lines to $BASH_COMP_DEBUG_FILE if set
__icarus_debug()
{
    local file="$BASH_COMP_DEBUG_FILE"
    [[ -n $file ]] && print -- "$*" >> "$file"
}

_icarus()
{
    __icarus_debug "\n========= _icarus starting ========="
    __icarus_debug "ORIGINAL words: $words[*]"
    __icarus_debug "CURRENT: $CURRENT"

    # 1) If you want to filter out -v / --verbose from $words, do it here
    #    but be mindful you can break indexing. In many cases it's easier
    #    to let them remain in $words and simply ignore them in your logic.
    local -a filtered_words
    filtered_words=("${(@)words:#(-v|--verbose)}")

    words=("${filtered_words[@]}")
    CURRENT=$#words
    __icarus_debug "Filtered words: $words[*]"

    # 2) Like in your snippet, we only want to parse up to $CURRENT
    #    in case the user moved the cursor backward.
    words=("${=words[1,CURRENT]}")
    __icarus_debug "Truncated words: $words[*]"

    # 3) Get last parameter, last character
    local lastParam=${words[-1]}
    local lastChar=${lastParam[-1]}
    __icarus_debug "lastParam: $lastParam, lastChar: $lastChar"

    # 4) We’ll decide what to complete based on how many words have been typed
    #    words[1] is "icarus"
    #    words[2] might be "macos", "amazon", etc. (the "subcommand")
    #    words[3] might be "encrypt-volume", "auth-init", etc. (the "action")
    local subcmd=${words[2]}
    local action=${words[3]}

    local -a completions  # array of possible completions
    local directive=0     # (if you use any directive bits)

    # If the user typed only `icarus [TAB]` or up to second word
    if (( CURRENT == 2 )); then
        # Step 1: Offer top-level subcommands
        completions+=(
            "amazon:utilities for Amazon environment"
            "builder:utilities for software development"
            "macos:utilities for macOS"
            "unison:utilities for Unison daemon"
            "--verbose:increase output verbosity"
            "-v:increase output verbosity"
            "--version:display version information"
            "--help:show help message"
            "-h:show help message"
        )

    # If the user typed `icarus SUBCMD [TAB]` or up to third word
    elif (( CURRENT == 3 )); then
        case $subcmd in
            amazon)
                completions+=(
                    "auth-init:run midway authentication"
                    "auth-init-exp:express version of auth-init"
                    "midway-cookie:check cookie validity"
                    "devdsk-formation:run DevDsk Formation"
                    "update-hosts:update /etc/hosts file"
                    "update-hosts-d:daemon to update hosts hourly"
                    "brazil-setup:create case-sensitive volumes"
                    "spurdog-ro:check membership for Spurdog Program"
                    "--help:show help message"
                    "-h:show help message"
                )
                ;;
            builder)
                completions+=(
                    "python-pkg-init:init a new Python package"
                    "dotfiles-update:update dotfiles"
                    "--help:show help message"
                    "-h:show help message"
                )
                ;;
            macos)
                completions+=(
                    "find-unencrypted-volumes:find unencrypted volumes"
                    "make-encrypted-volume:make an encrypted APFS volume"
                    "encrypt-volume:encrypt an APFS volume"
                    "mount-volume:mount the specified volume"
                    "mount-at-startup:daemon to mount volume at startup"
                    "--help:show help message"
                    "-h:show help message"
                )
                ;;
            unison)
                completions+=(
                    "status:check Unison profiles"
                    "restart:restart Unison sync"
                    "stop:stop Unison sync"
                    "clear-locks:clear Unison locks"
                    "start-at-startup:daemon to start Unison at boot"
                    "run-profiles:[DO NOT USE] internal for Unison"
                    "--help:show help message"
                    "-h:show help message"
                )
                ;;
        esac

    # If the user typed `icarus SUBCMD ACTION [TAB]` or more
    # This is where you’d define "options" for each sub-subcommand:
    else
        case $subcmd in
            amazon)
                case $action in
                    auth-init)
                        completions+=(
                            "-h:show help"
                            "-i:multiple DevDsk IDs"
                            "--mw-args:one arg to pass to mwinit"
                        )
                        ;;
                    auth-init-exp)
                        completions+=(
                            "-h:show help"
                            "-i:multiple DevDsk IDs"
                            "--mw-args:one arg to pass to mwinit"
                        )
                        ;;
                    midway-cookie)
                        completions+=(
                            "-h:show help"
                            "--filepath:filepath of the cookie file"
                        )
                        ;;
                    devdsk-formation)
                        completions+=(
                            "-h:show help"
                            "-i:REQUIRED the DevDsk ID"
                        )
                        ;;
                    update-hosts|update-hosts-d|brazil-setup)
                        completions+=( "-h:show help" )
                        ;;
                    spurdog-ro)
                        completions+=(
                            "-h:show help"
                            "-u:REQUIRED username to check membership"
                            "--auth:OPTIONAL run mwinit before querying"
                        )
                        ;;
                esac
                ;;
            builder)
                case $action in
                    python-pkg-init)
                        completions+=(
                            "-h:show help"
                            "-n:REQUIRED package name in PascalCase"
                        )
                        ;;
                    dotfiles-update)
                        completions+=( "-h:show help" )
                        ;;
                esac
                ;;
            macos)
                case $action in
                    find-unencrypted-volumes)
                        completions+=( "-h:show help" )
                        ;;
                    make-encrypted-volume)
                        completions+=(
                            "-h:show help"
                            "-n:REQUIRED name of the volume"
                            "-q:OPTIONAL size in Gb (e.g., -q 50g)"
                        )
                        ;;
                    encrypt-volume)
                        completions+=(
                            "-h:show help"
                            "-n:REQUIRED name of the volume"
                        )
                        ;;
                    mount-volume)
                        completions+=(
                            "-h:show help"
                            "-n:REQUIRED volume name"
                            "-p:REQUIRED mount point"
                        )
                        ;;
                    mount-at-startup)
                        completions+=(
                            "-h:show help"
                            "-n:REQUIRED volume name"
                            "-p:REQUIRED mount point"
                        )
                        ;;
                esac
                ;;
            unison)
                case $action in
                    status|restart|stop|start-at-startup|run-profiles)
                        completions+=( "-h:show help" )
                        ;;
                    clear-locks)
                        completions+=(
                            "-h:show help"
                            "-i:OPTIONAL DevDsk ID"
                        )
                        ;;
                esac
                ;;
        esac
    fi

    # We have an array of possible completions in $completions.
    # Use _describe (or compadd) to present them.
    # Format is "value:description", so no need for a TAB.
    # If you prefer 'compadd', you can do that too.
    __icarus_debug "Final completions: ${completions[@]}"
    if [[ -n $completions ]]; then
        _describe -t icarus 'completions' completions
        return
    else
        # If no completions found, you can optionally do file completion or
        # just return 1 to let Zsh try normal completions.
        __icarus_debug "No completions found; fallback to file completion"
        _files
    fi
}

# Register the _icarus function for the `icarus` command
compdef _icarus icarus
