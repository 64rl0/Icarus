#compdef icarus
# vim: ft=sh

#   __|    \    _ \  |      _ \   __| __ __| __ __|
#  (      _ \     /  |     (   | (_ |    |      |
# \___| _/  _\ _|_\ ____| \___/ \___|   _|     _|

# zsh completion for icarus

# Optional debug logger: writes debug lines to $BASH_COMP_DEBUG_FILE if set
ICARUS_COMP_DEBUG=false
if "${ICARUS_COMP_DEBUG}"; then
    BASH_COMP_DEBUG_FILE='/tmp/icarus_comp_debug.log'
fi

__icarus_debug() {
    local file="${BASH_COMP_DEBUG_FILE}"
    [[ -n "${file}" ]] && print -- "$*" >>"${file}"
}

_icarus() {
    __icarus_debug "\n========= _icarus starting ========="
    __icarus_debug "ORIGINAL words: '${words[*]}'"
    __icarus_debug "ORIGINAL CURRENT: ${CURRENT}"

    # Capturing previous param from $CURRENT
    local previousParamIdx="$((CURRENT - 1))"
    local previousParam="${words[${previousParamIdx}]}"

    # Count how many -v/--verbose occur before or at $CURRENT
    local count_removed=0
    for ((i=1; i <= CURRENT; i++)); do
        if [[ "${words[i]}" = '-v' || "${words[i]}" = '--verbose' ]]; then
            ((count_removed++))
        fi
    done

    # Build the filtered array
    local -a filtered_words
    filtered_words=("${(@)words:#(-v|--verbose)}")

    # Replace words with the filtered array
    words=("${filtered_words[@]}")

    # Adjust $CURRENT by the number of removed items that were before $CURRENT
    ((CURRENT -= count_removed))

    __icarus_debug "FILTERED words: '${words[*]}'"
    __icarus_debug "FILTERED CURRENT: ${CURRENT}"

    # We only want to parse up to $CURRENT in case the user moved the cursor backward
    words=("${(@)words[1,CURRENT]}")
    __icarus_debug "TRUNCATED words: '${words[*]}'"

    # Get last parameter, last character
    local lastParam="${words[-1]}"
    local lastChar="${lastParam[-1]}"
    __icarus_debug "previousParamIdx: ${previousParamIdx}"
    __icarus_debug "previousParam: '${previousParam}'"
    __icarus_debug "lastParam: '${lastParam}'"
    __icarus_debug "lastChar: '${lastChar}'"

    # We’ll decide what to complete based on how many words have been typed
    #    words[1] is "icarus"
    #    words[2] might be "macos", "amazon", etc. (the "subcommand")
    #    words[3] might be "encrypt-volume", "auth-init", etc. (the "action")
    local subcmd=${words[2]}
    local action=${words[3]}

    local -a completions # array of possible completions
    local directive=0    # (if you use any directive bits)

    # Make Zsh complete file paths after certain words
    if [[ "${previousParam}" == '--filepath' || "${previousParam}" == '-p' ]]; then
        _files
        return
    fi

    # If the user typed only `icarus [TAB]`
    if ((CURRENT == 2)); then
        completions+=(
            'amazon:utilities for Amazon environment'
            'builder:utilities for software development'
            'macos:utilities for macOS'
            'unison:utilities for Unison daemon'
            '--update:update icarus cli to the latest version'
            '--verbose:increase output verbosity'
            '-v:increase output verbosity'
            '--version:display version information'
            '--help:show help message'
            '-h:show help message'
        )

    # If the user typed `icarus SUBCMD [TAB]`
    elif ((CURRENT == 3)); then
        case "${subcmd}" in
        amazon)
            completions+=(
                'auth-init:run midway authentication on localhost and optional remote DevDsk(s)'
                'auth-init-exp:run midway authentication express on localhost and optional remote DevDsk(s)'
                'midway-cookie:check the cookies validity'
                'devdsk-formation:run DevDsk Formation on a remote DevDsk'
                'update-hosts:update /etc/hosts file'
                'update-hosts-d:install a LaunchDaemon to update the hosts file every hour'
                'brazil-setup:creating case-sensitive volumes (`workplace` and `brazil-pkg-cache`)'
                'spurdog-ro:check membership for Spurdog Program'
                '--help:show help message'
                '-h:show help message'
            )
            ;;
        builder)
            completions+=(
                'python-pkg-init:initiate a new Python package in the current folder'
                'dotfiles-update:update dotfiles from their specified repository'
                'forge:invoke the Forge build system'
                '--help:show help message'
                '-h:show help message'
            )
            ;;
        macos)
            completions+=(
                'find-unencrypted-volumes:find all unencrypted volumes'
                'make-encrypted-volume:make an encrypted APFS volume'
                'encrypt-volume:encrypt an APFS volume'
                'mount-volume:mount the specified volume at the specified mount point'
                'mount-at-startup:install a LaunchDaemon to mount the volume at System Startup'
                '--help:show help message'
                '-h:show help message'
            )
            ;;
        unison)
            completions+=(
                'status:check the running status of each Unison profile'
                'restart:restart Unison profile(s) sync'
                'stop:stop Unison profile(s) sync'
                'clear-locks:clear Unison locks on localhost and an optional remote DevDsk'
                'start-at-startup:install a LaunchDaemon to start Unison at System Startup'
                'run-profiles:[DO NOT USE] internally used only to run Unison profiles'
                '--help:show help message'
                '-h:show help message'
            )
            ;;
        esac

    # If the user typed `icarus SUBCMD ACTION [TAB]`
    # This is where you’d define "options" for each sub-subcommand:
    else
        case "${subcmd}" in
        amazon)
            case "${action}" in
            auth-init)
                completions+=(
                    '-i:OPTIONAL takes multiple DevDsk IDs i.e. -i 1 2 3'
                    '--mw-args:OPTIONAL specify one arg to pass to mwinit i.e. --mw-arg=--ncl'
                    '-h:show help message'
                )
                ;;
            auth-init-exp)
                completions+=(
                    '-i:OPTIONAL takes multiple DevDsk IDs i.e. -i 1 2 3'
                    '--mw-args:OPTIONAL specify one arg to pass to mwinit i.e. --mw-arg=--ncl'
                    '-h:show help message'
                )
                ;;
            midway-cookie)
                completions+=(
                    '--filepath:OPTIONAL the filepath of the cookie file, if none then ~/.midway/cookie'
                    '-h:show help message'
                )
                ;;
            devdsk-formation)
                completions+=(
                    '-i:REQUIRED the DevDsk ID'
                    '-h:show help message'
                )
                ;;
            update-hosts)
                completions+=(
                    '-h:show help message'
                )
                ;;
            update-hosts-d)
                completions+=(
                    '-h:show help message'
                )
                ;;
            brazil-setup)
                completions+=(
                    '-h:show help message'
                )
                ;;
            spurdog-ro)
                completions+=(
                    '-u:REQUIRED username to check Spurdog Program membership'
                    '--auth:OPTIONAL run mwinit before querying'
                    '-h:show help message'
                )
                ;;
            esac
            ;;
        builder)
            case "${action}" in
            python-pkg-init)
                completions+=(
                    '-n:REQUIRED the package name in PascalCase'
                    '-h:show help message'
                )
                ;;
            dotfiles-update)
                completions+=(
                    '-h:show help message'
                )
                ;;
            forge)
                completions+=(
                  '--venv:path to a virtual-env at ProjectRootDir/<path> to use'
                  '--with-isort:enable import-sorting with isort'
                  '--with-black:enable code formatting with black'
                  '--with-flake8:run static analysis with flake8'
                  '--with-mypy:type-check the codebase with mypy'
                  '--with-shfmt:format shell scripts with shfmt'
                  '--with-whitespaces:check for mixed or excessive whitespace'
                  '--with-trailing:remove trailing whitespace'
                  '--with-eofnewline:ensure files end with a single newline'
                  '--with-gitleaks:scan for secrets with gitleaks'
                  '--with-pytest:execute the unit-/integration-test suite via pytest'
                  '--format:run only formatting steps'
                  '--test:run only the test suite'
                  '--all:run every available step'
                  '--build-venv:create a virtual-env at ProjectRootDir/<path>'
                  '--py-version:python m.m version to use for the virtual-env. i.e. 3.10'
                )
            esac
            ;;
        macos)
            case "${action}" in
            find-unencrypted-volumes)
                completions+=(
                    '-h:show help message'
                )
                ;;
            make-encrypted-volume)
                completions+=(
                    '-n:REQUIRED name of the encrypted volume'
                    '-q:OPTIONAL size of the encrypted volume in Gb i.e. -q 50g'
                    '-h:show help message'
                )
                ;;
            encrypt-volume)
                completions+=(
                    '-n:REQUIRED name of the volume to encrypt'
                    '-h:show help message'
                )
                ;;
            mount-volume)
                completions+=(
                    '-n:REQUIRED name of the volume to mount'
                    '-p:REQUIRED mount point for the volume'
                    '-h:show help message'
                )
                ;;
            mount-at-startup)
                completions+=(
                    '-n:REQUIRED name of the volume to mount'
                    '-p:REQUIRED mount point for the volume'
                    '-h:show help message'
                )
                ;;
            esac
            ;;
        unison)
            case "${action}" in
            status)
                completions+=(
                    '-h:show help message'
                )
                ;;
            restart)
                completions+=(
                    '-h:show help message'
                )
                ;;
            stop)
                completions+=(
                    '-h:show help message'
                )
                ;;
            clear-locks)
                completions+=(
                    '-i:OPTIONAL the DevDsk ID'
                    '-h:show help message'
                )
                ;;
            start-at-startup)
                completions+=(
                    '-h:show help message'
                )
                ;;
            run-profiles)
                completions+=(
                    '-h:show help message'
                )
                ;;
            esac
            ;;
        esac
    fi

    # We have an array of possible completions in $completions.
    # Use _describe (or compadd) to present them.
    # Format is "value:description", so no need for a TAB.
    # If you prefer 'compadd', you can do that too.
    __icarus_debug "Final completions: ${completions[*]}"
    if [[ -n "${completions}" ]]; then
        _describe -t icarus 'completions' completions
        return 0
    else
        # If no completions found, you can optionally do file completion or
        # just return 1 to let Zsh try normal completions.
        __icarus_debug "No completions found; fallback to file completion"
        # _files
        return 1
    fi
}

# Register the _icarus function for the `icarus` command
compdef _icarus icarus
