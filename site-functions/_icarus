#compdef icarus

local -a commands
local -a amazon_args builder_args macos_args unison_args

commands=(
    '--amazon:Utilities for Amazon environment'
    '--builder:Utilities for software development'
    '--macos:Utilities for macOS'
    '--unison:Utilities to manage Unison daemon'
    '--help:Show help'
    '-h:Show help'
)

amazon_args=(
    '--auth-init:Run midway authentication on localhost and optional remote DevDsk(s)'
    '--auth-init-exp:Run midway authentication express on localhost and MANDATORY remote DevDsk(s)'
    '--midway-cookie:Check the cookies validity'
    '--devdsk-formation:Run DevDsk Formation on a remote DevDsk'
    '--update-hosts:Update /etc/hosts file'
    '--update-hosts-d:Install a LaunchDaemon to update the hosts file every hour'
    '--brazil-setup:Creating case-sensitive volumes ('workplace' and 'brazil-pkg-cache')'
    '--spurdog-ro:Check membership for Spurdog Program'
)

builder_args=(
    '--python-package-init:Initiate a new Python package in the current folder'
    '--dotfiles-update:Update dotfiles from their specified repository'
)

macos_args=(
    '--find-unencrypted-volumes:Find unencrypted volumes'
    '--make-encrypted-volume:Make an encrypted APFS volume'
    '--encrypt-volume:Encrypt an existing APFS volume'
    '--mount-volume:Mount the specified volume at the specified mount point'
    '--mount-at-startup:Install a LaunchDaemon to mount the volume at System Startup'
)

unison_args=(
    '--status:Check the running status of each Unison profile'
    '--start:Start Unison profile(s) sync'
    '--stop:Stop Unison profile(s) sync'
    '--clear-locks:Clear Unison locks on localhost and a optional remote DevDsk'
    '--start-at-startup:Install a LaunchDaemon to start Unison at System Startup'
)

case "$words[2]" in
    --amazon)
        case "$words[3]" in
            --auth-init)
                _arguments '-i[OPTIONAL DevDsk ID, takes multiple ids i.e. -i 1 2 3]:OPTIONAL DevDsk ID, takes multiple ids i.e. -i 1 2 3'
                _arguments '--devdsk[OPTIONAL run mwinit with OTP option [-o]]:OPTIONAL run mwinit with OTP option [-o]'
                ;;
            --auth-init-exp)
                _arguments '-i[DevDsk ID, takes multiple ids i.e. -i 1 2 3]:DevDsk ID, takes multiple ids i.e. -i 1 2 3'
                _arguments '--devdsk[OPTIONAL run mwinit with OTP option [-o]]:OPTIONAL run mwinit with OTP option [-o]'
                ;;
            --midway-cookie)
                :
                ;;
            --devdsk-formation)
                _arguments '-i[REQUIRED DevDsk ID]:REQUIRED DevDsk ID'
                ;;
            --update-hosts)
                :
                ;;
            --brazil-setup)
                :
                ;;
            --spurdog-ro)
                _arguments '-u[REQUIRED Amazon user alias]:REQUIRED Amazon user alias'
                ;;
            *)
                _describe 'args' amazon_args
                ;;
        esac
        ;;
    --builder)
        case "$words[3]" in
            --python-package-init)
                _arguments '-n[REQUIRED Package name in PascalCase]:REQUIRED Package name in PascalCase'
                ;;
            --dotfiles-update)
                :
                ;;
            *)
                _describe 'args' builder_args
                ;;
        esac
        ;;
    --macos)
        case "$words[3]" in
            --find-unencrypted-volumes)
                :
                ;;
            --make-encrypted-volume)
                _arguments '-n[REQUIRED Name of the volume to create]:REQUIRED Name of the volume to create' '-q[OPTIONAL Quota in Gb i.e. -q 50g]:OPTIONAL Quota in Gb i.e. -q 50g'
                ;;
            --encrypt-volume)
                :
                ;;
            --mount-volume)
                _arguments '-n[REQUIRED Name of the volume to mount]:REQUIRED Name of the volume to mount' '-p[REQUIRED Mount point]:REQUIRED Mount point'
                ;;
            --mount-at-startup)
                _arguments '-n[REQUIRED Name of the volume to mount]:REQUIRED Name of the volume to mount' '-p[REQUIRED Mount point]:REQUIRED Mount point'
                ;;
            *)
                _describe 'args' macos_args
                ;;
        esac
        ;;
    --unison)
        case "$words[3]" in
            --status)
                :
                ;;
            --start)
                :
                ;;
            --stop)
                :
                ;;
            --clear-locks)
                _arguments '-i[OPTIONAL DevDsk ID]:OPTIONAL DevDsk ID'
                ;;
            --start-at-startup)
                :
                ;;
            *)
                _describe 'args' unison_args
                ;;
        esac
        ;;
    *)
        _describe 'commands' commands
        ;;
esac
