#!/bin/bash

#   __|    \    _ \  |      _ \   __| __ __| __ __|
#  (      _ \     /  |     (   | (_ |    |      |
# \___| _/  _\ _|_\ ____| \___/ \___|   _|     _|

# bin/icarus
# Created 1/18/25 - 6:35 PM UK Time (London) by carlogtt
# Copyright (c) Amazon.com Inc. All Rights Reserved.
# AMAZON.COM CONFIDENTIAL

# Basic Foreground Colors
declare -r black=$'\033[30m'
declare -r red=$'\033[31m'
declare -r green=$'\033[32m'
declare -r yellow=$'\033[33m'
declare -r blue=$'\033[34m'
declare -r magenta=$'\033[35m'
declare -r cyan=$'\033[36m'
declare -r white=$'\033[37m'

# Basic Background Colors
declare -r bg_black=$'\033[40m'
declare -r bg_red=$'\033[41m'
declare -r bg_green=$'\033[42m'
declare -r bg_yellow=$'\033[43m'
declare -r bg_blue=$'\033[44m'
declare -r bg_magenta=$'\033[45m'
declare -r bg_cyan=$'\033[46m'
declare -r bg_white=$'\033[47m'

# Text Formatting
declare -r bold=$'\033[1m'
declare -r dim=$'\033[2m'
declare -r italic=$'\033[3m'
declare -r underline=$'\033[4m'
declare -r invert=$'\033[7m'
declare -r hidden=$'\033[8m'

# Reset Specific Formatting
declare -r end=$'\033[0m'
declare -r end_bold=$'\033[21m'
declare -r end_dim=$'\033[22m'
declare -r end_italic_underline=$'\033[23m'
declare -r end_invert=$'\033[27m'
declare -r end_hidden=$'\033[28m'

# Emoji
declare -r green_check_mark="\xE2\x9C\x85"
declare -r hammer_and_wrench="\xF0\x9F\x9B\xA0"
declare -r clock="\xE2\x8F\xB0"
declare -r sparkles="\xE2\x9C\xA8"
declare -r stop_sign="\xF0\x9F\x9B\x91"
declare -r warning_sign="\xE2\x9A\xA0\xEF\xB8\x8F"
declare -r key="\xF0\x9F\x94\x91"
declare -r circle_arrows="\xF0\x9F\x94\x84"
declare -r broom="\xF0\x9F\xA7\xB9"
declare -r link="\xF0\x9F\x94\x97"
declare -r package="\xF0\x9F\x93\xA6"
declare -r network_world="\xF0\x9F\x8C\x90"

# Script Options
set -o errexit   # Exit immediately if a command exits with a non-zero status
set -o pipefail  # Exit status of a pipeline is the status of the last cmd to exit with non-zero

# Script Paths
script_dir_abs="$(realpath -- "$(dirname -- "${BASH_SOURCE[0]}")")"
declare -r script_dir_abs

project_root_dir_abs="$(realpath -- "${script_dir_abs}/..")"
declare -r project_root_dir_abs

python_interpreter_abs="${project_root_dir_abs}/build_venv/bin/python3"
declare -r python_interpreter_abs

python_entrypoint_abs="${project_root_dir_abs}/entrypoint.py"
declare -r python_entrypoint_abs

log_path="${project_root_dir_abs}/log"
declare -r log_path

log_filepath="${project_root_dir_abs}/log/icarus.log"
declare -r log_filepath

# Check if the --update option is called
if [[ "$1" == '--update' ]]; then
    if [[ -f "${project_root_dir_abs}/.icarus_dev_env" ]]; then
        echo -e "${bg_red}${black}[WARNING]${end}"
        echo -e " You are about to run ${red}git reset --hard${end} on the dev env!"
        echo -e " Operation Interrupted! Only available in PROD!"
        exit 1
    fi
    echo -e "Updating icarus CLI please wait..."
    mkdir -p "${log_path}"
    {
        pushd "${project_root_dir_abs}"
        rm -rf "${project_root_dir_abs}/build_venv"
        git fetch
        git reset --hard origin/HEAD
        git pull
        make build
    } >"${log_filepath}" 2>&1
    echo -e "icarus CLI updated!"
    echo -e ""
fi

# Ensure the virtual environment exists
if [ ! -x "${python_interpreter_abs}" ]; then
    echo -e "Installing icarus CLI please wait..."
    mkdir -p "${log_path}"
    {
        pushd "${project_root_dir_abs}"
        rm -rf "${project_root_dir_abs}/build_venv"
        make build
    } >"${log_filepath}" 2>&1
    echo -e "icarus CLI installed!"
    echo -e ""
fi

# Execute the main CLI script with the virtual environment's Python
exec "${python_interpreter_abs}" "${python_entrypoint_abs}" "$@"
